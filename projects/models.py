# /home/rich/intranet_international/projects/models.py

from django.db import models
from django.utils.translation import gettext_lazy as _
from django.conf import settings
from core.models import Departement
from django.db.models import Avg
from datetime import date
from django.core.validators import MinValueValidator, MaxValueValidator
from decimal import Decimal  # Pour garantir la pr√©cision des calculs


# =================================================================
# CHOIX EXISTANTS
# =================================================================
# CHOIX pour le type d'Inspection
INSPECTION_TYPE_CHOICES = (
    ("PRE_PAT", _("Pr√©-Validation Interne (PRE-PAT)")),
    ("ATP", _("Acceptation Client (ATP)")),
)

# CHOIX pour le r√©sultat de l'Inspection
INSPECTION_RESULT_CHOICES = (
    ("FTR", _("First Time Right (FTR)")),
    ("NFTR", _("Not First Time Right (NFTR)")),
)

# CHOIX pour le statut de la T√¢che
TASK_STATUS_CHOICES = (
    ("TO_DO", _("√Ä Faire")),
    ("IN_PROGRESS", _("En Cours")),
    ("QC_PENDING", _("Contr√¥le Qualit√© (QC)")),
    ("COMPLETED", _("Termin√©e")),
    ("BLOCKED", _("Bloqu√©e")),
)

# NOUVEAUX CHOIX pour la Cat√©gorisation des T√¢ches (pour l'automatisation des statuts de Site)
TASK_TYPE_CHOICES = (
    ("INSTALLATION", _("Installation")),
    ("INTEGRATION", _("Int√©gration")),
    ("SRS", _("SRS")),
    ("IMK", _("IMK")),
    # Un seul type 'EHS' pour l'instant, les EHS multiples (EHS1, EHS2) seront g√©r√©s par la cr√©ation de t√¢ches distinctes
    ("EHS", _("EHS")),
    ("QA", _("QA")),
    ("ATP", _("ATP")),
    ("OTHER", _("Autre")),
)

PROJECT_STATUS_CHOICES = (
    ("PREPARATION", _("En pr√©paration")),
    ("IN_PROGRESS", _("En cours")),
    ("COMPLETED", _("Termin√©")),
    ("INVOICED", _("Factur√©")),
    ("PAID", _("Pay√©")),
)


# =================================================================
# MOD√àLE ABSTRAIT POUR LA TRA√áABILIT√â (NOUVEAU)
# =================================================================


class TraceabilityModel(models.Model):
    """
    Mod√®le abstrait pour ajouter automatiquement les champs
    created_by et updated_by √† un mod√®le.
    """

    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        editable=False,
        related_name="%(class)s_created",  # Permet le reverse lookup sur plusieurs mod√®les
        verbose_name=_("Cr√©√© par"),
    )
    updated_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        editable=False,
        related_name="%(class)s_updated",
        verbose_name=_("Mis √† jour par"),
    )

    class Meta:
        abstract = True  # üí° CL√â : Ne pas cr√©er de table pour ce mod√®le


# =================================================================
# 1. NOUVEAUX Mod√®les de R√©f√©rence (Lookup Models) g√©r√©s par l'Admin
# D√âFINIS EN PREMIER POUR √âVITER LES ERREURS DE R√âF√âRENCE
# =================================================================
class BaseLookupModel(models.Model):
    """Classe abstraite pour tous les mod√®les de r√©f√©rence (listes d√©roulantes de l'admin)."""

    name = models.CharField(
        max_length=100, unique=True, verbose_name=_("Nom de la r√©f√©rence")
    )
    is_active = models.BooleanField(default=True, verbose_name=_("Actif"))

    class Meta:
        abstract = True
        ordering = ["name"]

    def __str__(self):
        return self.name


class SitePhase(BaseLookupModel):
    class Meta(BaseLookupModel.Meta):
        verbose_name = _("Phase de Site")
        verbose_name_plural = _("Phases de Sites")


class Batch(BaseLookupModel):
    class Meta(BaseLookupModel.Meta):
        verbose_name = _("Batch de Site")
        verbose_name_plural = _("Batches de Sites")


class AntennaType(BaseLookupModel):
    class Meta(BaseLookupModel.Meta):
        verbose_name = _("Type d'Antenne")
        verbose_name_plural = _("Types d'Antennes")


class EnclosureType(BaseLookupModel):
    class Meta(BaseLookupModel.Meta):
        verbose_name = _("Type d'Enclosure (Bo√Ætier)")
        verbose_name_plural = _("Types d'Enclosures (Bo√Ætiers)")


class BBMLType(BaseLookupModel):
    class Meta(BaseLookupModel.Meta):
        verbose_name = _("BB / ML")
        verbose_name_plural = _("BB / ML")


class RadioType(BaseLookupModel):
    class Meta(BaseLookupModel.Meta):
        verbose_name = _("Mod√®le de Radio")
        verbose_name_plural = _("Mod√®les de Radio")


class Client(BaseLookupModel):
    class Meta(BaseLookupModel.Meta):
        verbose_name = _("Client")
        verbose_name_plural = _("Clients")


class SiteType(models.Model):
    name = models.CharField(
        max_length=100, unique=True, verbose_name=_("Nom du Type de Site")
    )
    is_active = models.BooleanField(default=True, verbose_name=_("Est Actif"))

    class Meta:
        verbose_name = _("Type de Site (Rooftop/Greenfield)")
        verbose_name_plural = _("Types de Sites")
        ordering = ("name",)

    def __str__(self):
        return self.name


class InstallationType(models.Model):
    name = models.CharField(
        max_length=100, unique=True, verbose_name=_("Nom du Type d'Installation")
    )
    is_active = models.BooleanField(default=True, verbose_name=_("Est Actif"))

    class Meta:
        verbose_name = _("Type d'Installation (RAN/Transmission)")
        verbose_name_plural = _("Types d'Installation")
        ordering = ("name",)

    def __str__(self):
        return self.name


class TaskResultType(models.Model):
    """Types de r√©sultats possibles (FTR, NFTR, DONE, NOT_DONE, etc.)"""

    name = models.CharField(max_length=50, verbose_name=_("Nom du r√©sultat"))
    code = models.CharField(max_length=20, unique=True, verbose_name=_("Code"))
    description = models.TextField(blank=True, verbose_name=_("Description"))
    is_success = models.BooleanField(default=True, verbose_name=_("Est un succ√®s"))

    class Meta:
        verbose_name = _("Type de R√©sultat")
        verbose_name_plural = _("Types de R√©sultats")
        ordering = ["name"]

    def __str__(self):
        return self.name


class TaskType(models.Model):
    CATEGORY_CHOICES = (
        ("PREPARATION", _("Pr√©paration")),
        ("INSTALLATION", _("Installation")),
        ("TESTING", _("Tests et Validation")),
        ("DOCUMENTATION", _("Documentation")),
        ("SAFETY", _("S√©curit√©")),
        ("CLOSURE", _("Cl√¥ture")),
    )

    name = models.CharField(max_length=100, verbose_name=_("Nom du type de t√¢che"))
    code = models.CharField(max_length=20, unique=True, verbose_name=_("Code unique"))
    description = models.TextField(blank=True, verbose_name=_("Description"))
    category = models.CharField(
        max_length=50, choices=CATEGORY_CHOICES, default="INSTALLATION"
    )

    # NOUVEAU: Types de r√©sultats autoris√©s pour ce type de t√¢che
    allowed_result_types = models.ManyToManyField(
        TaskResultType,
        blank=True,
        verbose_name=_("Types de r√©sultats autoris√©s"),
        help_text=_("Types de r√©sultats que l'utilisateur peut s√©lectionner"),
    )

    requires_photos = models.BooleanField(
        default=False, verbose_name=_("Requiert des photos")
    )
    photo_instructions = models.TextField(
        blank=True, verbose_name=_("Instructions pour les photos")
    )

    expected_duration_hours = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name=_("Dur√©e estim√©e (heures)"),
    )
    is_active = models.BooleanField(default=True)
    order = models.IntegerField(default=0, verbose_name=_("Ordre d'affichage"))

    class Meta:
        verbose_name = _("Type de T√¢che")
        verbose_name_plural = _("Types de T√¢ches")
        ordering = ["category", "order", "name"]

    def __str__(self):
        return f"{self.name} ({self.code})"


class ProjectType(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name=_("Nom du Type"))
    description = models.TextField(blank=True, verbose_name=_("Description"))

    # üí° Ce champ est la CL√â pour la logique de l'interface !
    is_transmission = models.BooleanField(
        default=False,
        verbose_name=_(
            "Est un type de projet Transmission (n√©cessite une liaison A/B)"
        ),
    )
    is_active = models.BooleanField(default=True)

    class Meta:
        verbose_name = _("Type de Projet")
        verbose_name_plural = _("Types de Projets")
        ordering = ["name"]

    def __str__(self):
        return self.name


# =================================================================
# 2. Mod√®le Project (Le Contrat Client)
# =================================================================


class Project(models.Model):
    country = models.ForeignKey(
        'users.Country',  # Utilise une cha√Æne pour √©viter l'import circulaire
        on_delete=models.PROTECT,
        verbose_name=_("Pays d'Ex√©cution"),
        help_text=_("Le pays d√©termine l'isolation des donn√©es."),
    )
    client = models.ForeignKey(
        Client,  # ‚úÖ OK : Client est d√©fini ci-dessus
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("Client")
    )

    name = models.CharField(max_length=200, verbose_name=_("Nom du Projet"))

    budget_alloue = models.DecimalField(
        max_digits=12,
        decimal_places=2,
        default=Decimal("0.00"),
        verbose_name=_("Budget Allou√©"),
    )

    statut = models.CharField(
        max_length=20,
        choices=PROJECT_STATUS_CHOICES,
        default="PREPARATION",
        verbose_name=_("Statut"),
    )

    coordinator = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name="coordinated_projects",
        verbose_name=_("Coordonnateur du Projet"),
        help_text=_(
            "L'utilisateur d√©sign√© pour g√©rer le projet (Project Coordinator/CM)."
        ),
    )

    start_date = models.DateField(verbose_name=_("Date de D√©marrage"))
    end_date = models.DateField(
        blank=True, null=True, verbose_name=_("Date de Fin Estim√©e")
    )

    is_active = models.BooleanField(default=True, verbose_name=_("Projet Actif"))
    is_completed = models.BooleanField(default=False, verbose_name=_("Projet Termin√©"))

    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name="projects_created",
        verbose_name=_("Cr√©√© par (Tra√ßabilit√©)"),
    )

    project_type = models.ForeignKey(
        ProjectType,  # ‚úÖ OK : ProjectType est d√©fini ci-dessus
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="projects",
        verbose_name=_("Type de Projet"),
    )

    progress_percentage = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=Decimal("0.00"),
        verbose_name=_("Progression Globale (%)"),
    )

    class Meta:
        verbose_name = _("Projet")
        verbose_name_plural = _("Projets")
        unique_together = ("country", "name")

    def __str__(self):
        return f"{self.name} ({self.country.code})"

    def update_progress(self):
        """
        Recalcule la progression globale du projet bas√©e sur les sites.
        """
        progress_data = self.sites.aggregate(avg_progress=Avg("progress_percentage"))
        self.progress_percentage = progress_data["avg_progress"] or Decimal("0.00")

        if self.statut not in ['INVOICED', 'PAID']:
            if self.progress_percentage >= 100:
                self.statut = 'COMPLETED'
            elif self.progress_percentage > 0:
                self.statut = 'IN_PROGRESS'
            else:
                self.statut = 'PREPARATION'
        
        self.save()
        
    def calculate_total_expenses(self):
        """Calcule le total des d√©penses pour ce projet."""
        
        # üëá IMPORTATION LOCALE
        from finance.models import Depense 
        
        # ‚úÖ CORRECTION :
        # On utilise 'projet_associe' qui est la cl√© √©trang√®re
        # directe vers Project dans ton mod√®le Depense.
        return self.depenses.aggregate(
            total=models.Sum("montant", default=Decimal("0.00"))
        )["total"]

# =================================================================
# 3. Mod√®le Site (Le Lieu d'Intervention)
# =================================================================
class Site(models.Model):
    # Infos de base
    project = models.ForeignKey(
        Project,
        on_delete=models.CASCADE,
        related_name="sites",
        verbose_name=_("Projet Parent"),
    )
    site_id_client = models.CharField(
        max_length=50, unique=True, verbose_name=_("ID du Site Client")
    )  # ID du Site*
    name = models.CharField(
        max_length=200, verbose_name=_("Nom du Site")
    )  # Nom du Site*
    location = models.CharField(
        max_length=255, blank=True, verbose_name=_("Localisation")
    )
    site_area = models.CharField(
        max_length=100, blank=True, verbose_name=_("Site Area")
    )  # Site Area

    departement = models.ForeignKey(
        Departement,
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        verbose_name=_("D√©partement"),
    )

    # Ces champs doivent exister pour la logique transmission
    is_transmission_a_site = models.BooleanField(
        default=False, verbose_name=_("Site A de Transmission")
    )
    is_transmission_b_site = models.BooleanField(
        default=False, verbose_name=_("Site B de Transmission")
    )

    # üìå Team Lead Assign√©
    team_lead = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="led_sites",
        verbose_name=_("Team Lead Assign√©"),
    )
    
    start_date = models.DateField(
        verbose_name=_("Date de D√©marrage"),
        default=date.today
    )
    end_date = models.DateField(
        verbose_name=_("Date de Fin"), 
        null=True, 
        blank=True
    )

    # üìå Cl√©s √âtrang√®res vers les NOUVELLES R√©f√©rences (Lookup Models)
    phase = models.ForeignKey(
        SitePhase,  # ‚úÖ OK
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        verbose_name=_("Phase"),
    )  # Phase
    batch = models.ForeignKey(
        Batch,  # ‚úÖ OK
        on_delete=models.PROTECT, 
        null=True, 
        blank=True, 
        verbose_name=_("Batch")
    )  # Batch
    project_scope = models.TextField(
        blank=True, verbose_name=_("Port√©e du Projet")
    )  # Port√©e du projet
    antenna_type = models.ForeignKey(
        AntennaType,  # ‚úÖ OK
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        verbose_name=_("Type d'Antenne"),
    )  # Type d'antenne
    enclosure_type = models.ForeignKey(
        EnclosureType,  # ‚úÖ OK
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        verbose_name=_("Type d'Enclosure"),
    )  # Type d'ENCLOSURE
    bb_ml = models.ForeignKey(
        BBMLType,  # ‚úÖ OK
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        verbose_name=_("BB / ML"),
    )  # BB / ML

    # NOUVEAU Champ COMMENTAIRE
    comment = models.TextField(
        blank=True, verbose_name=_("Commentaire du Site")
    )  # COMMENT

    prix_facturation = models.DecimalField(
        max_digits=12,
        decimal_places=2,
        default=Decimal("0.00"),
        verbose_name=_("Prix de Facturation")
    )
    po_recu = models.BooleanField(default=False, verbose_name=_("PO Re√ßu"))

    status = models.CharField(
        max_length=20, default="TO_DO", verbose_name=_("Statut G√©n√©ral du Site")
    )

    progress_percentage = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=Decimal("0.00"),
        verbose_name=_("Progression (%)"),
    )

    # NOUVEAUX CHAMPS DE CONFIGURATION
    site_type = models.ForeignKey(
        SiteType,  # ‚úÖ OK
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="sites",
        verbose_name=_("Type de Site"),
    )
    installation_type = models.ForeignKey(
        InstallationType,  # ‚úÖ OK
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="sites",
        verbose_name=_("Type d'Installation"),
    )

    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name="sites_created",
        verbose_name=_("Cr√©√© par (Tra√ßabilit√©)"),
    )

    last_inspection_result = models.CharField(
        max_length=5,
        blank=True,
        null=True,
        choices=INSPECTION_RESULT_CHOICES,
        verbose_name=_("R√©sultat Derni√®re Inspection"),
    )

    class Meta:
        verbose_name = _("Site")
        verbose_name_plural = _("Sites")
        ordering = ["project", "site_id_client"]

    def __str__(self):
        return f"{self.site_id_client} - {self.name}"

    def _get_task_status(self, task_type_code):
        """Fonction utilitaire pour v√©rifier si une t√¢che de type donn√© est COMPLETED."""
        task = (
            self.tasks.filter(task_type__code=task_type_code)
            .order_by("-due_date")
            .first()
        )
        if task and task.status == "COMPLETED":
            return _("Compl√©t√©")
        elif task:
            return _("En Cours")
        return _("√Ä Faire")

    @property
    def installation_status(self):
        return self._get_task_status("INSTALLATION")

    @property
    def integration_status(self):
        return self._get_task_status("INTEGRATION")

    @property
    def srs_status(self):
        return self._get_task_status("SRS")

    @property
    def imk_status(self):
        return self._get_task_status("IMK")

    @property
    def atp_status(self):
        return self._get_task_status("ATP")

    @property
    def ehs_status(self):
        return self._get_task_status("EHS")

    @property
    def qa_result(self):
        last_qa = (
            self.inspections.filter(type_inspection="ATP")
            .order_by("-date_inspection")
            .first()
        )
        if last_qa:
            return last_qa.get_resultat_inspection_display()
        return _("N/A")

    def update_progress(self):
        """
        Recalcule la progression du site bas√©e sur les t√¢ches et cascade au projet.
        """
        progress_data = self.tasks.aggregate(avg_progress=Avg("progress_percentage"))

        new_progress = progress_data["avg_progress"] or Decimal("0.00")
        self.progress_percentage = new_progress

        if new_progress >= 100:
            self.status = 'COMPLETED'
        elif new_progress > 0:
            self.status = 'IN_PROGRESS'
        else:
            self.status = 'TO_DO'

        self.save()

        # Cascade vers le projet parent
        self.project.update_progress()


# =================================================================
# 4. Mod√®le SiteRadioConfiguration (Jonction M2M avec data)
# =================================================================
class SiteRadioConfiguration(models.Model):
    site = models.ForeignKey(
        Site,
        on_delete=models.CASCADE,
        related_name="radio_configurations",
        verbose_name=_("Site"),
    )
    radio_type = models.ForeignKey(
        RadioType,  # ‚úÖ OK
        on_delete=models.PROTECT, 
        verbose_name=_("Mod√®le de Radio")
    )
    quantity = models.IntegerField(
        default=1, validators=[MinValueValidator(1)], verbose_name=_("Quantit√©")
    )

    class Meta:
        verbose_name = _("Configuration Radio")
        verbose_name_plural = _("Configurations Radio")
        unique_together = (
            "site",
            "radio_type",
        )

    def __str__(self):
        return f"{self.quantity}x {self.radio_type.name} sur {self.site.site_id_client}"


# =================================================================
# 5. Mod√®le Task (T√¢che √† r√©aliser)
# =================================================================
class Task(models.Model):
    site = models.ForeignKey(
        Site,
        on_delete=models.CASCADE,
        related_name="tasks",
        verbose_name=_("Site Associ√©"),
    )

    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name="tasks_created",
        verbose_name=_("Cr√©√© par"),
    )

    result_type = models.ForeignKey(
        TaskResultType,  # ‚úÖ OK
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("R√©sultat de la t√¢che"),
    )

    completion_date = models.DateTimeField(
        null=True, blank=True, verbose_name=_("Date de compl√©tion")
    )

    task_type = models.ForeignKey(
        TaskType,  # ‚úÖ OK
        on_delete=models.PROTECT,
        verbose_name=_("Type de t√¢che"),
    )

    description = models.TextField(verbose_name=_("Description de la T√¢che"))

    assigned_to = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name="assigned_tasks",
        verbose_name=_("Assign√© √†"),
    )
    due_date = models.DateField(verbose_name=_("Date Limite"))

    status = models.CharField(
        max_length=20,
        choices=TASK_STATUS_CHOICES,
        default="TO_DO",
        verbose_name=_("Statut"),
    )
    progress_percentage = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(100)],
        verbose_name=_("Progression (%)"),
    )

    ticket_number = models.CharField(
        max_length=100, 
        blank=True, 
        null=True, 
        verbose_name=_("Num√©ro de Ticket")
    )

    expected_duration_hours = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name=_("Dur√©e Estim√©e (h)"),
    )
    is_paid_relevant = models.BooleanField(
        default=False, verbose_name=_("Pertinent pour la Paie")
    )

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _("T√¢che")
        verbose_name_plural = _("T√¢ches")
        ordering = ["due_date", "site__site_id_client"]

    def __str__(self):
        return f"[{self.site.site_id_client}] {self.description[:30]}..."

    def save(self, *args, **kwargs):
        if self.status == 'TO_DO':
            self.progress_percentage = 0
        elif self.status == 'IN_PROGRESS':
            self.progress_percentage = 50
        elif self.status == 'QC_PENDING':
            self.progress_percentage = 75
        elif self.status == 'COMPLETED':
            self.progress_percentage = 100
        super(Task, self).save(*args, **kwargs)


# =================================================================
# 6. Mod√®le WorkCompletionRecord (AJOUT√â CAR MANQUANT)
# =================================================================
class WorkCompletionRecord(models.Model):
    """
    Enregistrement des travaux effectu√©s par un employ√© sur une t√¢che.
    Utilis√© pour la paie et le suivi de la progression.
    """
    task = models.ForeignKey(
        Task, 
        on_delete=models.CASCADE, 
        related_name="work_records",
        verbose_name=_("T√¢che")
    )
    # Dans vos signaux, vous l'appelez 'employee', pas 'user'
    employee = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name="work_records",
        verbose_name=_("Employ√©")
    )
    date = models.DateField(default=date.today, verbose_name=_("Date du travail"))
    
    duration_hours = models.DecimalField(
        max_digits=5, 
        decimal_places=2, 
        default=Decimal("0.00"),
        verbose_name=_("Dur√©e (heures)")
    )
    completion_percentage = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(100)],
        verbose_name=_("Ach√®vement (%)")
    )
    
    # Champs pour la paie (calcul√©s par le signal)
    hourly_rate_used = models.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        null=True, 
        blank=True,
        verbose_name=_("Taux Horaire Utilis√©")
    )
    cost = models.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        null=True, 
        blank=True,
        verbose_name=_("Co√ªt (Paie)")
    )
    is_paid_out = models.BooleanField(default=False, verbose_name=_("Est Pay√©"))

    # Tra√ßabilit√©
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name="created_work_records",
        verbose_name=_("Saisi par")
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _("Enregistrement de Travail")
        verbose_name_plural = _("Enregistrements de Travail")
        ordering = ['-date']

    def __str__(self):
        return f"Travail sur {self.task} par {self.employee.username} le {self.date}"


# =================================================================
# 7. Mod√®le TaskPhoto (D√âPEND DE TASK)
# =================================================================
class TaskPhoto(models.Model):
    task = models.ForeignKey(
        Task,
        on_delete=models.CASCADE,
        related_name="task_images",
    )

    photo = models.ImageField(
        upload_to="task_photos/%Y/%m/%d/", verbose_name=_("Photo")
    )
    caption = models.CharField(max_length=255, blank=True, verbose_name=_("L√©gende"))
    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _("Photo de T√¢che")
        verbose_name_plural = _("Photos de T√¢ches")
        ordering = ["-uploaded_at"]

    def __str__(self):
        return f"Photo pour {self.task} - {self.uploaded_at}"


# =================================================================
# 8. Mod√®le Inspection (D√âPEND DE SITE)
# =================================================================
class Inspection(models.Model):
    site = models.ForeignKey(
        Site,
        on_delete=models.CASCADE,
        related_name="inspections",
        verbose_name=_("Site Inspect√©"),
    )
    type_inspection = models.CharField(
        max_length=10,
        choices=INSPECTION_TYPE_CHOICES,
        verbose_name=_("Type d'Inspection"),
    )
    inspector = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name="inspections_performed",
        verbose_name=_("Inspecteur"),
    )
    resultat_inspection = models.CharField(
        max_length=5,
        choices=INSPECTION_RESULT_CHOICES,
        verbose_name=_("R√©sultat"),
    )
    date_inspection = models.DateField(
        default=date.today, verbose_name=_("Date de l'Inspection")
    )
    rapport_photos_url = models.URLField(
        max_length=500,
        blank=True,
        null=True,
        verbose_name=_("Lien Rapport Photos/Drive"),
    )
    commentaires = models.TextField(
        blank=True, verbose_name=_("Commentaires de l'Inspecteur")
    )

    class Meta:
        verbose_name = _("Inspection")
        verbose_name_plural = _("Inspections")
        ordering = ["-date_inspection"]

    def __str__(self):
        return f"Inspection {self.type_inspection} - {self.site.site_id_client}"


# =================================================================
# 9. Mod√®le TransmissionLink (D√âPEND DE SITE)
# =================================================================
class TransmissionLink(models.Model):
    """
    Mod√®le pour lier deux sites ensemble dans le cadre d'une installation Transmission.
    """
    link_id = models.CharField(
        max_length=50, unique=True, verbose_name=_("ID de la Liaison")
    )

    site_a = models.OneToOneField(
        Site,
        on_delete=models.CASCADE,
        related_name="transmission_link_a",
        verbose_name=_("Site A"),
    )
    site_b = models.OneToOneField(
        Site,
        on_delete=models.CASCADE,
        related_name="transmission_link_b",
        verbose_name=_("Site B"),
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _("Liaison Transmission")
        verbose_name_plural = _("Liaisons Transmission")

    def __str__(self):
        return f"Liaison {self.link_id}: {self.site_a.site_id_client} <-> {self.site_b.site_id_client}"